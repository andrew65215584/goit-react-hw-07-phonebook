{"version":3,"sources":["components/Form/form.module.css","components/Filter/filter.module.css","redux/actions.js","redux/reducers.js","redux/store.js","middlewares/loggers.js","components/Form/Form.js","redux/operations.js","components/ContactList/ContactList.js","redux/selectors.js","components/Filter/Filter.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["module","exports","getFormValueFetch","createAction","getFormValueSuccess","getFormValueError","getFormValue","deleteContact","getFilterValue","setFilteredArr","setLocalData","setNotify","removeFilteredArr","phonebookReducer","createReducer","contacts","items","filter","isLoading","state","payload","contact","id","filteredItems","el","name","toLowerCase","includes","middlWares","dispatch","getState","next","action","store","createStore","composeWithDevTools","applyMiddleware","Form","useState","number","setState","useDispatch","useSelector","handleNameChange","target","value","prev","className","styles","form","onSubmit","e","preventDefault","param","input","elements","flag","map","a","axios","post","data","reset","label","type","onChange","button","connect","deleteContactAsync","console","log","delete","TransitionGroup","component","item","CSSTransition","key","timeout","classNames","unmountOnExit","onClick","getFilter","mapDispatchToProps","Notification","getDataFromDB","get","keys","Object","result","reduce","acc","push","notify","useEffect","in","onEntered","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7044dceb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__CBSvm\",\"label\":\"form_label__e_cto\",\"input\":\"form_input__YX0oc\",\"button\":\"form_button__3LLEV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"filter_title__2n9z3\",\"input\":\"filter_input__-IHMM\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const getFormValueFetch = createAction('phonebook/GET_FORM_VALUE_Fetch');\nexport const getFormValueSuccess = createAction(\n  'phonebook/GET_FORM_VALUE_Success',\n);\nexport const getFormValueError = createAction('phonebook/GET_FORM_VALUE_Error');\n\nexport const getFormValue = createAction('phonebook/GET_FORM_VALUE');\n\nexport const deleteContact = createAction('phonebook/DELETE_CONTACT');\nexport const getFilterValue = createAction('phonebook/GET_FILTER_VALUE');\nexport const setFilteredArr = createAction('phonebook/SET_FILTERED_ARR');\nexport const setLocalData = createAction('phonebook/SET_LOCAL_DATA');\nexport const setNotify = createAction('phonebook/SET_NOTIFY');\nexport const removeFilteredArr = createAction('phonebook/REMOVE_FILTERED_ARR');\n","import { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  getFormValue,\n  getFormValueFetch,\n  getFormValueSuccess,\n  getFormValueError,\n  deleteContact,\n  getFilterValue,\n  setFilteredArr,\n  setLocalData,\n  setNotify,\n  removeFilteredArr,\n} from './actions';\n\nconst initialState = {\n  contacts: {\n    items: [],\n    filter: '',\n  },\n  isLoading: false,\n};\n\nexport const phonebookReducer = createReducer(initialState, {\n  [getFormValue]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: [...payload],\n    },\n  }),\n\n  [getFormValueFetch]: (state, { payload }) => ({\n    ...state,\n    isLoading: !state.isLoading,\n  }),\n\n  [getFormValueSuccess]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: [...state.contacts.items, payload],\n    },\n  }),\n\n  [deleteContact]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: state.contacts.items.filter(contact => contact.id !== payload),\n    },\n  }),\n\n  [getFilterValue]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filter: payload,\n    },\n  }),\n\n  [setFilteredArr]: state => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filteredItems: state.contacts.items.filter(el =>\n        el.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n      ),\n    },\n  }),\n\n  [setLocalData]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: payload,\n    },\n  }),\n\n  [setNotify]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      setNotify: payload,\n    },\n  }),\n\n  [removeFilteredArr]: state => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filteredItems: null,\n    },\n  }),\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport { phonebookReducer } from './reducers';\n// import { configureStore } from '@reduxjs/toolkit';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { logger } from '../middlewares/loggers';\n\nconst middlWares = [logger];\n\nconst store = createStore(\n  phonebookReducer,\n  composeWithDevTools(applyMiddleware(...middlWares)),\n);\nexport default store;\n\n// import { applyMiddleware, createStore, combineReducers } from 'redux'\n// // import { configureStore } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension'\n\n// import { phonebookReducer } from './reducers';\n// import { logger } from '../middlewares/loggers'\n\n// const rootRedcer = combineReducers({\n\n//   noteBook: phonebookReducer,\n// items : itemsRewducer ,\n\n// })\n\n// const middlWares = [logger]\n\n// const store = createStore(rootRedcer, composeWithDevTools(applyMiddleware(...middlWares)));\n// export default store;\n","export const logger = ({ dispatch, getState }) => next => action => {\n  return typeof action === 'function'\n    ? action(dispatch, getState)\n    : next(action);\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport styles from './form.module.css';\nimport { setNotify } from '../../redux/actions';\nimport { postFormValueAsync } from '../../redux/operations';\n\n// { items, setNotify, getFormValueAsync, getFormValueFromFireBase }\nfunction Form() {\n  const [state, setState] = useState({ name: '', number: '' });\n\n  const dispatch = useDispatch();\n  const items = useSelector(state => state.contacts.items);\n\n  const handleNameChange = ({ target: { name, value } }) => {\n    setState(prev => ({ ...prev, [name]: value }));\n  };\n\n  const hanndleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (state.name === '' || state.number === '') {\n      return;\n    } else {\n      const input = e.target.elements;\n      let flag = true;\n\n      items.map(el => (el.name === input[0].value ? (flag = false) : ''));\n\n      flag\n        ? dispatch(\n            postFormValueAsync({\n              name: input[0].value,\n              number: input[1].value,\n            }),\n          )\n        : dispatch(setNotify(true));\n    }\n\n    form.reset();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={hanndleSubmit}>\n      <label className={styles.label}>\n        Name:\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <label className={styles.label}>\n        Phone:\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  getContact: PropTypes.func,\n  getName: PropTypes.func,\n};\n\n// const mapStateToProps = state => ({ items: state.contacts.items });\n\n// const mapDispatchToProps = { setNotify, getFormValueAsync, getFormValueFromFireBase };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\n\nexport default Form;\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//? На классах\n// export class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleNameChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//     this.props.getName(this.state.name);\n//   };\n\n//   hanndleSubmit = e => {\n//     e.preventDefault();\n//     this.props.getContact({ ...this.state, id: uuidv4() });\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form className={styles.form} onSubmit={this.hanndleSubmit}>\n//         <label className={styles.label}>\n//           Name:\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={styles.label}>\n//           Phone:\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n\n//         <button className={styles.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","import axios from 'axios';\nimport {\n  getFormValueFetch,\n  getFormValueSuccess,\n  getFormValueError,\n  getFormValue,\n} from './actions';\nimport store from './store';\n\nexport const getDataFromDB = param => async (dispatch, getState) => {\n  try {\n    const data = await axios.get(\n      `https://phonebook-c7b0b.firebaseio.com/phoneBook.json`,\n    );\n    const keys = Object.keys(data.data);\n\n    const result = keys.reduce((acc, key) => {\n      acc.push({ id: key, ...data.data[key] });\n\n      return acc;\n    }, []);\n\n    dispatch(getFormValue(result));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const postFormValueAsync = param => async (dispatch, getState) => {\n  dispatch(getFormValueFetch());\n  try {\n    const data = await axios.post(\n      `https://phonebook-c7b0b.firebaseio.com/phoneBook.json`,\n      param,\n    );\n    dispatch(getFormValueSuccess({ ...param, id: data.data.name }));\n  } catch (e) {\n    dispatch(getFormValueError(e));\n  } finally {\n    dispatch(getFormValueFetch());\n  }\n};\n\nexport const deleteContactAsync = param => async (dispatch, getState) => {\n  console.log('param', param);\n  try {\n    const data = await axios.delete(\n      `https://phonebook-c7b0b.firebaseio.com/phoneBook/${param}.json`,\n    );\n\n    console.log('dataaaaaaaaaaaaaaaaaaaaaaaaaaaaa', data);\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact, removeFilteredArr } from '../../redux/actions';\nimport './contactList.css';\nimport { deleteContactAsync } from '../../redux/operations';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport function ContactList({\n  value,\n  deleteContact,\n  removeFilteredArr,\n  deleteContactAsync,\n}) {\n  const handleButtonClick = id => {\n    deleteContactAsync(id);\n    deleteContact(id);\n    removeFilteredArr();\n  };\n\n  console.log(value);\n  return (\n    <TransitionGroup component=\"ul\" className=\"list\">\n      {value.map(item => {\n        return (\n          <CSSTransition\n            key={item.id}\n            timeout={250}\n            classNames=\"adddelete\"\n            unmountOnExit\n          >\n            <li className=\"item\" key={item.id}>\n              <div className=\"wrapper\">\n                <span>{item.name}</span>\n                <span>: {item.number}</span>\n              </div>\n              <button\n                className=\"button\"\n                onClick={() => handleButtonClick(item.id)}\n              >\n                Delete\n              </button>\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n}\n\nContactList.propTypes = {\n  contactList: PropTypes.arrayOf(PropTypes.object),\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: state.contacts.filteredItems\n    ? state.contacts.filteredItems\n    : state.contacts.items,\n});\nexport default connect(mapStateToProps, {\n  deleteContact,\n  removeFilteredArr,\n  deleteContactAsync,\n})(ContactList);\n","export const getFilter = state => {\n  return state.contacts.filter;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './filter.module.css';\nimport {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n} from '../../redux/actions';\n\nimport { connect } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\n\nfunction Filter({ filter, getFilterValue, setFilteredArr, removeFilteredArr }) {\n  const getName = ({ target: { value } }) => {\n    getFilterValue(value);\n    setFilteredArr(value);\n    if (value === '') {\n      removeFilteredArr();\n    }\n  };\n\n  return (\n    <>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={getName}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  getFilterName: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({ filter: getFilter(state) });\n\nconst mapDispatchToProps = {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport './notification.css';\n\nexport const Notification = () => {\n  return <div className=\"notify\">This contact is already in exist!</div>;\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Form from './Form/Form';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { Notification } from './Notification/Notification';\nimport { setLocalData, setNotify } from '../redux/actions';\n\nimport { CSSTransition } from 'react-transition-group';\nimport { getDataFromDB } from '../redux/operations';\nimport './app.css';\n\nexport function App({\n  value,\n  setLocalData,\n  notify,\n  setNotify,\n  isLoading,\n  getDataFromDB,\n}) {\n  // useEffect(() => {\n  //   const items = localStorage.getItem('items');\n  //   const itemsParsed = JSON.parse(items);\n  //   if (itemsParsed) {\n  //     setLocalData(itemsParsed);\n  //   }\n  // }, [setLocalData]);\n\n  useEffect(() => {\n    getDataFromDB();\n  }, [getDataFromDB]);\n\n  // useEffect(() => {\n  //   getDataFromDB()\n  // }, []);\n\n  return (\n    <>\n      <CSSTransition\n        in={notify}\n        timeout={2000}\n        classNames=\"notify\"\n        unmountOnExit\n        onEntered={() => setNotify(false)}\n      >\n        <Notification />\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={2000}\n        classNames=\"op\"\n        unmountOnExit\n      >\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n      <Form />\n      <CSSTransition\n        in={value.length >= 1}\n        timeout={300}\n        unmountOnExit\n        classNames=\"title-contacts\"\n      >\n        <h2 className=\"title-contacts\">Contacts</h2>\n      </CSSTransition>\n\n      {isLoading && <h2> ..... loading</h2>}\n\n      <CSSTransition\n        in={value.length >= 2}\n        timeout={300}\n        unmountOnExit\n        classNames=\"filter\"\n      >\n        <Filter />\n      </CSSTransition>\n      <ContactList />\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.contacts.items,\n  filter: state.contacts.filter,\n  notify: state.contacts.setNotify,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToProps = { setLocalData, setNotify, getDataFromDB };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//? На классах\n// export default class App extends Component {\n//   state = {\n//     contacts: [],\n//     name: '',\n//     notify: false,\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const contactsParsed = JSON.parse(contacts);\n//     if (contactsParsed) {\n//       this.setState({ contacts: contactsParsed });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   getName = data => {\n//     this.setState({ name: data });\n//   };\n\n//   getContact = contact => {\n//     let flag = true;\n\n//     this.state.contacts.map(el =>\n//       el.name === contact.name ? (flag = false) : '',\n//     );\n\n//     flag\n//       ? this.setState(prev => {\n//           return { ...prev, contacts: [...prev.contacts, contact] };\n//         })\n//       : this.notifyTrue();\n//   };\n\n//   notifyTrue() {\n//     this.setState({ notify: true });\n//   }\n\n//   getFilterName = event => {\n//     this.setState({ filter: event.target.value });\n//   };\n\n//   filteredItems = () => {\n//     return this.state.filter\n//       ? this.state.contacts.filter(el =>\n//           el.name.toLowerCase().includes(this.state.filter.toLowerCase()),\n//         )\n//       : this.state.contacts;\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prev => ({\n//       contacts: prev.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <CSSTransition\n//           in={this.state.notify}\n//           timeout={2000}\n//           classNames=\"notify\"\n//           unmountOnExit\n//           onEntered={() => this.setState({ notify: false })}\n//         >\n//           <Notification />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={2000}\n//           classNames=\"op\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Phonebook</h2>\n//         </CSSTransition>\n//         <Form getContact={this.getContact} getName={this.getName} />\n//         <CSSTransition\n//           in={this.state.contacts.length >= 1}\n//           timeout={300}\n//           unmountOnExit\n//           classNames=\"title-contacts\"\n//         >\n//           <h2 className=\"title-contacts\">Contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length >= 2}\n//           timeout={300}\n//           unmountOnExit\n//           classNames=\"filter\"\n//         >\n//           <Filter\n//             filter={this.state.filter}\n//             getFilterName={this.getFilterName}\n//           />\n//         </CSSTransition>\n//         <ContactList\n//           contactList={this.filteredItems()}\n//           deleteContact={this.deleteContact}\n//         />\n//       </>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}