{"version":3,"sources":["components/Filter/filter.module.css","redux/actions.js","components/Form/Form.js","components/ContactList/ContactList.js","redux/selectors.js","components/Filter/Filter.js","components/Notification/Notification.js","components/App.js","redux/reducers.js","redux/store.js","index.js","components/Form/form.module.css"],"names":["module","exports","getFormValue","createAction","deleteContact","getFilterValue","setFilteredArr","setLocalData","setNotify","removeFilteredArr","mapDispatchToProps","connect","state","items","contacts","useState","name","number","setState","handleNameChange","target","value","prev","className","styles","form","onSubmit","e","preventDefault","input","elements","flag","map","el","id","uuidv4","reset","label","type","onChange","button","filteredItems","TransitionGroup","component","item","CSSTransition","key","timeout","classNames","unmountOnExit","onClick","getFilter","filter","Notification","notify","useEffect","localStorage","getItem","itemsParsed","JSON","parse","setItem","stringify","in","onEntered","appear","length","phonebookReducer","createReducer","payload","contact","toLowerCase","includes","store","configureStore","reducer","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c415b9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"filter_title__2gUFS\",\"input\":\"filter_input__3sfZb\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const getFormValue = createAction('phonebook/GET_FORM_VALUE');\nexport const deleteContact = createAction('phonebook/DELETE_CONTACT');\nexport const getFilterValue = createAction('phonebook/GET_FILTER_VALUE');\nexport const setFilteredArr = createAction('phonebook/SET_FILTERED_ARR');\nexport const setLocalData = createAction('phonebook/SET_LOCAL_DATA');\nexport const setNotify = createAction('phonebook/SET_NOTIFY');\nexport const removeFilteredArr = createAction('phonebook/REMOVE_FILTERED_ARR');\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './form.module.css';\nimport { connect } from 'react-redux';\nimport { getFormValue, setNotify } from '../../redux/actions';\n\nfunction Form({ getFormValue, items, setNotify }) {\n  const [state, setState] = useState({ name: '', number: '' });\n\n  const handleNameChange = ({ target: { name, value } }) => {\n    setState(prev => ({ ...prev, [name]: value }));\n  };\n\n  const notifyTrue = () => {\n    setNotify(true);\n  };\n\n  const hanndleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (state.name === '' || state.number === '') {\n      return;\n    } else {\n      const input = e.target.elements;\n      let flag = true;\n\n      items.map(el => (el.name === input[0].value ? (flag = false) : ''));\n\n      flag\n        ? getFormValue({\n            name: input[0].value,\n            number: input[1].value,\n            id: uuidv4(),\n          })\n        : notifyTrue();\n    }\n    form.reset();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={hanndleSubmit}>\n      <label className={styles.label}>\n        Name:\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <label className={styles.label}>\n        Phone:\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  getContact: PropTypes.func,\n  getName: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({ items: state.contacts.items });\nconst mapDispatchToProps = { getFormValue, setNotify };\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//? На классах\n// export class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleNameChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//     this.props.getName(this.state.name);\n//   };\n\n//   hanndleSubmit = e => {\n//     e.preventDefault();\n//     this.props.getContact({ ...this.state, id: uuidv4() });\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form className={styles.form} onSubmit={this.hanndleSubmit}>\n//         <label className={styles.label}>\n//           Name:\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={styles.label}>\n//           Phone:\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n\n//         <button className={styles.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact, removeFilteredArr } from '../../redux/actions';\nimport './contactList.css';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nexport function ContactList({ value, deleteContact, removeFilteredArr }) {\n  const handleButtonClick = id => {\n    deleteContact(id);\n    removeFilteredArr();\n  };\n  return (\n    <TransitionGroup component=\"ul\" className=\"list\">\n      {value.map(item => {\n        return (\n          <CSSTransition\n            key={item.id}\n            timeout={250}\n            classNames=\"adddelete\"\n            unmountOnExit\n          >\n            <li className=\"item\" key={item.id}>\n              <div className=\"wrapper\">\n                <span>{item.name}</span>\n                <span>: {item.number}</span>\n              </div>\n              <button\n                className=\"button\"\n                onClick={() => handleButtonClick(item.id)}\n              >\n                Delete\n              </button>\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n}\n\nContactList.propTypes = {\n  contactList: PropTypes.arrayOf(PropTypes.object),\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: state.contacts.filteredItems\n    ? state.contacts.filteredItems\n    : state.contacts.items,\n});\nexport default connect(mapStateToProps, { deleteContact, removeFilteredArr })(\n  ContactList,\n);\n","export const getFilter = state => {\n  return state.contacts.filter;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './filter.module.css';\nimport {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n} from '../../redux/actions';\n\nimport { connect } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\n\nfunction Filter({ filter, getFilterValue, setFilteredArr, removeFilteredArr }) {\n  const getName = ({ target: { value } }) => {\n    getFilterValue(value);\n    setFilteredArr(value);\n    if (value === '') {\n      removeFilteredArr();\n    }\n  };\n\n  return (\n    <>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={getName}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  getFilterName: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({ filter: getFilter(state) });\n\nconst mapDispatchToProps = {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport './notification.css';\n\nexport const Notification = () => {\n  return <div className=\"notify\">This contact is already in exist!</div>;\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Form from './Form/Form';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport { Notification } from './Notification/Notification';\nimport { setLocalData, setNotify } from '../redux/actions';\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport './app.css';\n\nexport function App({ value, setLocalData, notify, setNotify }) {\n  useEffect(() => {\n    const items = localStorage.getItem('items');\n    const itemsParsed = JSON.parse(items);\n    if (itemsParsed) {\n      setLocalData(itemsParsed);\n    }\n  }, [setLocalData]);\n\n  useEffect(() => {\n    localStorage.setItem('items', JSON.stringify(value));\n  }, [value]);\n\n  return (\n    <>\n      <CSSTransition\n        in={notify}\n        timeout={2000}\n        classNames=\"notify\"\n        unmountOnExit\n        onEntered={() => setNotify(false)}\n      >\n        <Notification />\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={2000}\n        classNames=\"op\"\n        unmountOnExit\n      >\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n      <Form />\n      <CSSTransition\n        in={value.length >= 1}\n        timeout={300}\n        unmountOnExit\n        classNames=\"title-contacts\"\n      >\n        <h2 className=\"title-contacts\">Contacts</h2>\n      </CSSTransition>\n      <CSSTransition\n        in={value.length >= 2}\n        timeout={300}\n        unmountOnExit\n        classNames=\"filter\"\n      >\n        <Filter />\n      </CSSTransition>\n      <ContactList />\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.contacts.items,\n  filter: state.contacts.filter,\n  notify: state.contacts.setNotify,\n});\nconst mapDispatchToProps = { setLocalData, setNotify };\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//? На классах\n// export default class App extends Component {\n//   state = {\n//     contacts: [],\n//     name: '',\n//     notify: false,\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const contactsParsed = JSON.parse(contacts);\n//     if (contactsParsed) {\n//       this.setState({ contacts: contactsParsed });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   getName = data => {\n//     this.setState({ name: data });\n//   };\n\n//   getContact = contact => {\n//     let flag = true;\n\n//     this.state.contacts.map(el =>\n//       el.name === contact.name ? (flag = false) : '',\n//     );\n\n//     flag\n//       ? this.setState(prev => {\n//           return { ...prev, contacts: [...prev.contacts, contact] };\n//         })\n//       : this.notifyTrue();\n//   };\n\n//   notifyTrue() {\n//     this.setState({ notify: true });\n//   }\n\n//   getFilterName = event => {\n//     this.setState({ filter: event.target.value });\n//   };\n\n//   filteredItems = () => {\n//     return this.state.filter\n//       ? this.state.contacts.filter(el =>\n//           el.name.toLowerCase().includes(this.state.filter.toLowerCase()),\n//         )\n//       : this.state.contacts;\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prev => ({\n//       contacts: prev.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <CSSTransition\n//           in={this.state.notify}\n//           timeout={2000}\n//           classNames=\"notify\"\n//           unmountOnExit\n//           onEntered={() => this.setState({ notify: false })}\n//         >\n//           <Notification />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={2000}\n//           classNames=\"op\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Phonebook</h2>\n//         </CSSTransition>\n//         <Form getContact={this.getContact} getName={this.getName} />\n//         <CSSTransition\n//           in={this.state.contacts.length >= 1}\n//           timeout={300}\n//           unmountOnExit\n//           classNames=\"title-contacts\"\n//         >\n//           <h2 className=\"title-contacts\">Contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length >= 2}\n//           timeout={300}\n//           unmountOnExit\n//           classNames=\"filter\"\n//         >\n//           <Filter\n//             filter={this.state.filter}\n//             getFilterName={this.getFilterName}\n//           />\n//         </CSSTransition>\n//         <ContactList\n//           contactList={this.filteredItems()}\n//           deleteContact={this.deleteContact}\n//         />\n//       </>\n//     );\n//   }\n// }\n","import {\n  getFormValue,\n  deleteContact,\n  getFilterValue,\n  setFilteredArr,\n  setLocalData,\n  setNotify,\n  removeFilteredArr,\n} from './actions';\n\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: {\n    items: [],\n    filter: '',\n  },\n};\n\nexport const phonebookReducer = createReducer(initialState, {\n  [getFormValue]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: [...state.contacts.items, payload],\n    },\n  }),\n  [deleteContact]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: state.contacts.items.filter(contact => contact.id !== payload),\n    },\n  }),\n  [getFilterValue]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filter: payload,\n    },\n  }),\n\n  [setFilteredArr]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filteredItems: state.contacts.items.filter(el =>\n        el.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n      ),\n    },\n  }),\n\n  [setLocalData]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      items: [...payload],\n    },\n  }),\n\n  [setNotify]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      setNotify: payload,\n    },\n  }),\n\n  [removeFilteredArr]: (state, { payload }) => ({\n    ...state,\n    contacts: {\n      ...state.contacts,\n      filteredItems: null,\n    },\n  }),\n});\n","import { phonebookReducer } from './reducers';\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst store = configureStore({\n  reducer: phonebookReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n});\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__2E0wn\",\"label\":\"form_label__1TncP\",\"input\":\"form_input__14q_4\",\"button\":\"form_button__1TSiV\"};"],"sourceRoot":""}